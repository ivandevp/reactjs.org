webpackJsonp([0x81b8806e4260],{959:function(e,n){e.exports={data:{code:{edges:[{node:{id:"a-component-using-external-plugins",internal:{contentDigest:'"class MarkdownEditor extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.handleChange = this.handleChange.bind(this);\\n    this.state = { value: \'Hello, **world**!\' };\\n  }\\n\\n  handleChange(e) {\\n    this.setState({ value: e.target.value });\\n  }\\n\\n  getRawMarkup() {\\n    const md = new Remarkable();\\n    return { __html: md.render(this.state.value) };\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\"MarkdownEditor\\">\\n        <h3>Input</h3>\\n        <label htmlFor=\\"markdown-content\\">\\n          Enter some markdown\\n        </label>\\n        <textarea\\n          id=\\"markdown-content\\"\\n          onChange={this.handleChange}\\n          defaultValue={this.state.value}\\n        />\\n        <h3>Output</h3>\\n        <div\\n          className=\\"content\\"\\n          dangerouslySetInnerHTML={this.getRawMarkup()}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<MarkdownEditor />, mountNode);"'}}},{node:{id:"a-simple-component",internal:{contentDigest:'"class HelloMessage extends React.Component {\\n  render() {\\n    return (\\n      <div>\\n        Hello {this.props.name}\\n      </div>\\n    );\\n  }\\n}\\n\\nReactDOM.render(\\n  <HelloMessage name=\\"Taylor\\" />,\\n  mountNode\\n);"'}}},{node:{id:"a-stateful-component",internal:{contentDigest:'"class Timer extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { seconds: 0 };\\n  }\\n\\n  tick() {\\n    this.setState(prevState => ({\\n      seconds: prevState.seconds + 1\\n    }));\\n  }\\n\\n  componentDidMount() {\\n    this.interval = setInterval(() => this.tick(), 1000);\\n  }\\n\\n  componentWillUnmount() {\\n    clearInterval(this.interval);\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        Seconds: {this.state.seconds}\\n      </div>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<Timer />, mountNode);"'}}},{node:{id:"an-application",internal:{contentDigest:'"class TodoApp extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = { items: [], text: \'\' };\\n    this.handleChange = this.handleChange.bind(this);\\n    this.handleSubmit = this.handleSubmit.bind(this);\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <h3>TODO</h3>\\n        <TodoList items={this.state.items} />\\n        <form onSubmit={this.handleSubmit}>\\n          <label htmlFor=\\"new-todo\\">\\n            What needs to be done?\\n          </label>\\n          <input\\n            id=\\"new-todo\\"\\n            onChange={this.handleChange}\\n            value={this.state.text}\\n          />\\n          <button>\\n            Add #{this.state.items.length + 1}\\n          </button>\\n        </form>\\n      </div>\\n    );\\n  }\\n\\n  handleChange(e) {\\n    this.setState({ text: e.target.value });\\n  }\\n\\n  handleSubmit(e) {\\n    e.preventDefault();\\n    if (!this.state.text.length) {\\n      return;\\n    }\\n    const newItem = {\\n      text: this.state.text,\\n      id: Date.now()\\n    };\\n    this.setState(prevState => ({\\n      items: prevState.items.concat(newItem),\\n      text: \'\'\\n    }));\\n  }\\n}\\n\\nclass TodoList extends React.Component {\\n  render() {\\n    return (\\n      <ul>\\n        {this.props.items.map(item => (\\n          <li key={item.id}>{item.text}</li>\\n        ))}\\n      </ul>\\n    );\\n  }\\n}\\n\\nReactDOM.render(<TodoApp />, mountNode);\\n"'}}}]},examples:{edges:[{node:{fields:{slug:"/home/examples/a-simple-component.html"},frontmatter:{title:"Un componente simple"},html:'<p>Los componentes de React implementan un método <code>render()</code> que toma los datos de entrada y retorna lo que se debe mostrar en el UI. Este ejemplo usa una sintaxis XML-like (semejante a XML) llamada JSX. Los datos de entrada que son pasados en el componente puede ser accedidos por <code>render()</code> a través de <code>this.props</code>;</p>\n<p><strong>JSX es opcional y no es requerido para usar React.</strong> Prueba el <a href="https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA" target="_blank" rel="noreferrer">Babel REPL</a> para ver el código de JavaScript plano producido por el paso de compilación de JSX.</p>'}},{node:{fields:{slug:"/home/examples/a-stateful-component.html"},frontmatter:{title:"Un componente con estado (stateful)"},html:"<p>Además de tomar datos de entrada (accedidos a través de <code>this.props</code>), un componente puede mantener datos de estado interno (accedido a través de <code>this.state</code>). Cuando la data del estado de un componente cambia, el markup (maquetado) renderizado será actualizado, reinvocando el método <code>render()</code>.</p>"}},{node:{fields:{slug:"/home/examples/an-application.html"},frontmatter:{title:"Una aplicación"},html:"<p>Usando <code>props</code> y <code>state</code>, podemos realizar una pequeña aplicación Todo. Este ejemplo usa <code>state</code> para hacer seguimiento de la lista actual de items así como el texto que el usuario ha ingresado. A pesar de que los manejadores de eventos (<em>event handlers</em>) aparentan estar renderizados en línea (<em>inline</em>), serán coleccionados e implementados usando delegación de eventos (<em>event delegation</em>).</p>"}},{node:{fields:{slug:"/home/examples/a-component-using-external-plugins.html"},frontmatter:{title:"Un componente usando plugins externos"},html:"<p>React es flexible y provee hooks que te permiten interactuar con otras librerías y frameworks. Este ejemplo usa <strong>remarkable</strong>, un librería externa de Markdown, para convertir el valor del <code>&#x3C;textarea></code> en tiempo real.</p>"}}]},marketing:{edges:[{node:{frontmatter:{title:"Declarativo"},html:"<p>React hace menos doloroso el crear UIs interactivas. Diseña vistas simples para cada estado en tu aplicación, y React actualizará eficientemente y renderizará solo los componentes correctos cuando tu data cambia.</p>\n<p>Vistas declarativas hacen tu código más predecible y fácil de depurar.</p>"}},{node:{frontmatter:{title:"Basado en componentes"},html:"<p>Contruye componentes encapsulados que manejan su propio estado, luego júntalos para hacer UIs complejas.</p>\n<p>Debido a que la lógica del componente está escrita en JavaScript en vez de plantillas, tu puedes fácilmente pasar data valiosa a través de tu app y mantener el estado fuera del DOM.</p>"}},{node:{frontmatter:{title:"Aprende una vez, escribe en todos lados"},html:'<p>Nosotros no asumimos acerca del resto del stack tecnológico, así que puedes desarrollar nuevos features (funcionalidades) en React sin reescribir código existente.</p>\n<p>React también puede renderizar en el servidor usando Node y hacer aplicaciones móviles usando <a href="https://facebook.github.io/react-native/">React Native</a>.</p>'}}]}},pathContext:{}}}});
//# sourceMappingURL=path---index-61113831ad5279bff4c9.js.map